generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  candidate
  recruiter
}

enum ApplicationStatus {
  applied
  under_review
  rejected
  inprogress
  closed
}

enum SkillLevel {
  beginner
  intermediate
  advanced
}

model UserMaster {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique
  phone       String?   @unique
  userName    String?   @unique @map("user_name")
  dob         DateTime? @db.Date
  role        UserRole
  verified    Boolean   @default(false)
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdBy   String?   @map("created_by") @db.Uuid
  updatedBy   String?   @map("updated_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  education        UserEducation[]
  experience       UserExperience[]
  projects         UserProjects[]
  skillset         UserSkillset[]
  recruiterCompanies CompanyRecruiterMap[]
  jobApplications  JobApplication[]        @relation("RecruiterToJob")
  applications     ApplicationCandidateMap[]

  @@map("user_master")
}

model DegreeMaster {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique
  type      String    @unique
  isActive  Boolean   @default(true) @map("is_active")
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  education UserEducation[]

  @@map("degree_master")
}

model SkillMaster {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String    @unique
  isActive  Boolean   @default(true) @map("is_active")
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  userSkills      UserSkillset[]
  applicationSkills ApplicationSkillMap[]

  @@map("skill_master")
}

model ResourceMaster {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  image     String?   @unique
  title     String    @unique
  link      String?   @unique
  isActive  Boolean   @default(true) @map("is_active")
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("resource_master")
}

model CompanyMaster {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @unique
  description String?
  size        Int?
  url         String?   @unique
  isActive    Boolean   @default(true) @map("is_active")
  createdBy   String?   @map("created_by") @db.Uuid
  updatedBy   String?   @map("updated_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  recruiters      CompanyRecruiterMap[]
  jobApplications JobApplication[]

  @@map("company_master")
}

model CompanyRecruiterMap {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId String    @map("company_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  isActive  Boolean   @default(true) @map("is_active")
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  company   CompanyMaster @relation(fields: [companyId], references: [id])
  user      UserMaster   @relation(fields: [userId], references: [id])

  @@map("company_recruiter_map")
}

model ApplicationCandidateMap {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jobId          String    @map("job_id") @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  status         ApplicationStatus
  assignmentLink String?   @map("assignment_link")
  isActive       Boolean   @default(true) @map("is_active")
  createdBy      String?   @map("created_by") @db.Uuid
  updatedBy      String?   @map("updated_by") @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  job         JobApplication @relation(fields: [jobId], references: [id])
  user        UserMaster    @relation(fields: [userId], references: [id])
  extraAnswers ExtraAnswers[]

  @@map("application_candidate_map")
}

model ExtraQuestions {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jobId     String    @map("job_id") @db.Uuid
  question  String
  isActive  Boolean   @default(true) @map("is_active")
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  job     JobApplication @relation(fields: [jobId], references: [id])
  answers ExtraAnswers[]

  @@map("extra_questions")
}

model ExtraAnswers {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  jobId         String    @map("job_id") @db.Uuid
  applicationId String    @map("application_id") @db.Uuid
  questionId    String    @map("question_id") @db.Uuid
  answer        String
  isActive      Boolean   @default(true) @map("is_active")
  createdBy     String?   @map("created_by") @db.Uuid
  updatedBy     String?   @map("updated_by") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  job         JobApplication        @relation(fields: [jobId], references: [id])
  application ApplicationCandidateMap @relation(fields: [applicationId], references: [id])
  question    ExtraQuestions       @relation(fields: [questionId], references: [id])

  @@map("extra_answers")
}

model ApplicationSkillMap {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skillId     String    @map("skill_id") @db.Uuid
  skillLevel  SkillLevel
  jobId       String    @map("job_id") @db.Uuid
  isActive    Boolean   @default(true) @map("is_active")
  createdBy   String?   @map("created_by") @db.Uuid
  updatedBy   String?   @map("updated_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  skill     SkillMaster    @relation(fields: [skillId], references: [id])
  job       JobApplication @relation(fields: [jobId], references: [id])

  @@map("application_skill_map")
}

model JobApplication {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId       String    @map("company_id") @db.Uuid
  recruiterId     String    @map("recruiter_id") @db.Uuid
  requestedBy     String?   @map("requested_by")
  jobCode         String    @map("job_code")
  location        String?
  title           String
  jobDescription  String?   @map("job_description")
  package         Decimal?
  assignmentLink  String?   @map("assignment_link")
  endAt          DateTime? @map("end_at") @db.Date
  isActive        Boolean   @default(true) @map("is_active")
  createdBy       String?   @map("created_by") @db.Uuid
  updatedBy       String?   @map("updated_by") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  company        CompanyMaster            @relation(fields: [companyId], references: [id])
  recruiter      UserMaster              @relation("RecruiterToJob", fields: [recruiterId], references: [id])
  applications   ApplicationCandidateMap[]
  skillMap       ApplicationSkillMap[]
  extraQuestions ExtraQuestions[]
  extraAnswers   ExtraAnswers[]

  @@map("job_application")
}

model UserEducation {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  degreeId  String    @map("degree_id") @db.Uuid
  endAt     DateTime? @map("end_at") @db.Date
  eduFrom   String?   @map("edu_from")
  isActive  Boolean   @default(true) @map("is_active")
  createdBy String?   @map("created_by") @db.Uuid
  updatedBy String?   @map("updated_by") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  // Relations
  user    UserMaster   @relation(fields: [userId], references: [id])
  degree  DegreeMaster @relation(fields: [degreeId], references: [id])

  @@map("user_education")
}

model UserExperience {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  endAt       DateTime? @map("end_at") @db.Date
  companyName String    @map("company_name")
  title       String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdBy   String?   @map("created_by") @db.Uuid
  updatedBy   String?   @map("updated_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user UserMaster @relation(fields: [userId], references: [id])

  @@map("user_experience")
}

model UserProjects {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  endAt       DateTime? @map("end_at") @db.Date
  link        String?
  title       String
  description String?
  isActive    Boolean   @default(true) @map("is_active")
  createdBy   String?   @map("created_by") @db.Uuid
  updatedBy   String?   @map("updated_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user UserMaster @relation(fields: [userId], references: [id])

  @@map("user_projects")
}

model UserSkillset {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  skillId     String    @map("skill_id") @db.Uuid
  skillLevel  SkillLevel
  isActive    Boolean   @default(true) @map("is_active")
  createdBy   String?   @map("created_by") @db.Uuid
  updatedBy   String?   @map("updated_by") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user  UserMaster  @relation(fields: [userId], references: [id])
  skill SkillMaster @relation(fields: [skillId], references: [id])

  @@map("user_skillset")
}